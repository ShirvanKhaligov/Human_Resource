// <auto-generated />
using System;
using InternalSystem.Areas.InternalHR.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InternalSystem.Migrations
{
    [DbContext(typeof(InternalSysDBContext))]
    [Migration("20201204120733_Createffourtables")]
    partial class Createffourtables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InternalSystem.Areas.Admin.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AdminId");

                    b.Property<int?>("CompaniesId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("EmplooyeeId");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("Image");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompaniesId");

                    b.HasIndex("EmplooyeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("InternalSystem.Areas.Employee.Models.Extention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EmpFullData");

                    b.Property<string>("NewPassword");

                    b.Property<string>("OldPassword");

                    b.HasKey("Id");

                    b.ToTable("Extentions");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.AdditionalInfos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionCertImage");

                    b.Property<string>("AdobePdf");

                    b.Property<int>("EmplooyeeId");

                    b.Property<string>("MicrosoftWord");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("AdditionalInfos");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountriesId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("status");

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Commands.Commands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1300);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Commands.CommandsToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommandId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("EmplooyeeId");

                    b.Property<DateTime>("TimeOfExecution");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("CommandsToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("ExeTime");

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RegistrationNumber");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(110);

                    b.Property<string>("Website");

                    b.Property<string>("ZipCode");

                    b.Property<bool>("status");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ComputerLevels");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerSkillsName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("ComputerSkillsNames");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerSkillToLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComputerLevelsId");

                    b.Property<int>("ComputerSkillsNameId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ComputerLevelsId");

                    b.HasIndex("ComputerSkillsNameId");

                    b.ToTable("ComputerSkillToLevels");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerSkillToLevelsId");

                    b.Property<int>("EmplooyeeId");

                    b.HasKey("Id");

                    b.HasIndex("ComputerSkillToLevelsId");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("ComputerToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Continuity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmplooyeeId");

                    b.Property<int>("PermissionType");

                    b.Property<string>("Reason");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("Continuities");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.ContactBetweenDepartmentsInbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<string>("From");

                    b.Property<string>("Message");

                    b.Property<bool>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("To");

                    b.Property<bool>("isRead");

                    b.HasKey("Id");

                    b.ToTable("ContactBetweenDepartmentsInbox");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.ContactBetweenDepartmentsSent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<string>("From");

                    b.Property<string>("Message");

                    b.Property<bool>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("To");

                    b.Property<bool>("isRead");

                    b.HasKey("Id");

                    b.ToTable("ContactBetweenDepartmentsSent");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.DepartmentToCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("MenegerId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MenegerId");

                    b.ToTable("DepartmentToCompanies");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.Property<int?>("SubDepartmentId");

                    b.HasKey("Id");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.SubDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentToCompanyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentToCompanyId");

                    b.ToTable("SubDepartments");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Devices.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DevicesTypeId");

                    b.Property<DateTime>("GivingTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Reason")
                        .HasMaxLength(155);

                    b.Property<DateTime?>("ReturnDate");

                    b.Property<bool>("Status");

                    b.Property<DateTime>("TimeOfExecution");

                    b.HasKey("Id");

                    b.HasIndex("DevicesTypeId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Devices.DevicesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("DevicesTypes");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Devices.DeviceToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceId");

                    b.Property<int?>("EmplooyeeId");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("DeviceToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcceptHoney");

                    b.Property<DateTime>("EnteringTime");

                    b.Property<DateTime>("FinishTime");

                    b.Property<int?>("ProfessionId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.EducationsToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EducationId");

                    b.Property<int>("EmplooyeeId");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("EducationsToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.EducationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("EducationTypes");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.EducationTypeToUnivercity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EducationTypeId");

                    b.Property<int?>("UniversitiesId");

                    b.HasKey("Id");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("UniversitiesId");

                    b.ToTable("EducationTypeToUnivercities");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.Property<int?>("UniFacultyId");

                    b.HasKey("Id");

                    b.HasIndex("UniFacultyId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EducationTypeId");

                    b.Property<int?>("EmplooyeeId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.UniFaculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EducationTypeToUniversityId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EducationTypeToUniversityId");

                    b.ToTable("UniFaculties");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.Universities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Emplooyee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("Birthday");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FinCode")
                        .HasMaxLength(8);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("GenderId");

                    b.Property<string>("IdCard")
                        .HasMaxLength(15);

                    b.Property<string>("Image");

                    b.Property<bool>("IsCandidate");

                    b.Property<bool>("IsWorking");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LivingAdress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("MarialstatusId");

                    b.Property<int?>("MillitaryStatusId");

                    b.Property<int?>("PositionsId");

                    b.Property<decimal?>("Salary");

                    b.Property<string>("ScanCommand");

                    b.Property<bool>("Status");

                    b.Property<int?>("WorkBookAdditionId");

                    b.Property<int?>("WorkPlaceAdditionId");

                    b.Property<int?>("WorkTimeOfTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MarialstatusId");

                    b.HasIndex("MillitaryStatusId");

                    b.HasIndex("PositionsId");

                    b.HasIndex("WorkBookAdditionId");

                    b.HasIndex("WorkPlaceAdditionId");

                    b.HasIndex("WorkTimeOfTypeId");

                    b.ToTable("Emplooyeees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.HistoryPositionChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommandsToEmployeeId");

                    b.Property<int?>("EmplooyeeId");

                    b.Property<int?>("PositionId");

                    b.Property<decimal?>("Salary");

                    b.Property<int?>("WorkPlaceAdditionId");

                    b.Property<int?>("WorkTimeOfTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CommandsToEmployeeId");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("HistoryPositionChanges");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Languages.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Languages.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Languages.LanguageToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmplooyeeId");

                    b.Property<int>("LanguageToLanguageLevelId");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.HasIndex("LanguageToLanguageLevelId");

                    b.ToTable("LanguageToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Languages.LanguageToLanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LanguageId");

                    b.Property<int?>("LanguageLevelId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.ToTable("LanguageToLanguageLevels");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.LastWorkPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("EmplooyeeId");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("ReasonType");

                    b.Property<string>("Salary");

                    b.Property<bool>("Status");

                    b.Property<DateTime>("WhenLeft");

                    b.Property<DateTime>("WhenStarted");

                    b.Property<string>("WorkType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("LastWorks");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.MarialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MarialStatuses");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.MillitaryRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MillitaryRanks");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.MillitaryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MillitaryRankId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MillitaryRankId");

                    b.ToTable("MillitaryStatuses");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.Explanation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatingTime");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExeTime");

                    b.Property<DateTime>("FromDate");

                    b.Property<DateTime>("FromDateForHour");

                    b.Property<int>("PermissionTypeId");

                    b.Property<string>("Reason");

                    b.Property<DateTime>("ToDate");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Explanations");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.ExplanationToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmplooyeeId");

                    b.Property<int?>("ExplanationId");

                    b.Property<int>("PermissionId");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.HasIndex("ExplanationId");

                    b.ToTable("ExplanationToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cancel");

                    b.Property<bool>("Confirm");

                    b.Property<DateTime>("CreatingTime");

                    b.Property<DateTime>("FromDate");

                    b.Property<DateTime>("FromDateForHour");

                    b.Property<int>("PermissionTypeId");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<DateTime>("ToDate");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.PermissionToEmployeee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmplooyeeId");

                    b.Property<int>("PermissionId");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionToEmployeees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PermissionTypes");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.PhoneNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HomeNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.PhoneNumberToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmplooyeeID");

                    b.Property<int>("PhoneNumberId");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeID");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("PhoneNumberToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Relations.Relations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasMaxLength(255);

                    b.Property<string>("FatherName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .HasMaxLength(25);

                    b.Property<int?>("RelationTypeId");

                    b.Property<bool>("Status");

                    b.Property<string>("Surname")
                        .HasMaxLength(50);

                    b.Property<string>("WorkPlaceName")
                        .HasMaxLength(255);

                    b.Property<string>("WorkPlacePositionName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("RelationTypeId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Relations.RelationToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmplooyeeId");

                    b.Property<int>("RelationId");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.HasIndex("RelationId");

                    b.ToTable("RelationToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Relations.RelationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RelationTypes");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.RewardToEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("EmplooyeeId");

                    b.Property<decimal>("Money");

                    b.Property<string>("Reason");

                    b.Property<int>("RewardId");

                    b.Property<bool>("Status");

                    b.Property<DateTime>("TimeOfExecution");

                    b.Property<int>("customid");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.HasIndex("RewardId");

                    b.ToTable("RewardToEmployees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ScanForReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Pdf");

                    b.Property<int?>("RewardToEmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("RewardToEmployeeId");

                    b.ToTable("ScanForRewards");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ScanPdfCommands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommandsName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("EmplooyeeId");

                    b.Property<DateTime>("Exetime");

                    b.Property<string>("Pdf");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.ToTable("ScanPdfCommands");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ScanPdfQuitWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommandsToEmployeeId");

                    b.Property<string>("Pdf");

                    b.HasKey("Id");

                    b.HasIndex("CommandsToEmployeeId");

                    b.ToTable("ScanPdfQuitWorks");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.SocialLinks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExeTime");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Socials");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.TaxBreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TaxBreaks");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.TaxBreakToEmplooyee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmplooyeeId");

                    b.Property<int?>("TaxBreakId");

                    b.HasKey("Id");

                    b.HasIndex("EmplooyeeId");

                    b.HasIndex("TaxBreakId");

                    b.ToTable("TaxBreakToEmplooyees");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.WorkBookAddition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(25);

                    b.Property<string>("SSNNumber")
                        .HasMaxLength(35);

                    b.Property<string>("WorkbookNumber")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("WorkBookAdditions");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.WorkPlaceAddition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("WorkPlaceAdditions");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.WorkTimeOfType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("WorkTimeOfTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InternalSystem.Areas.Admin.Models.AppUser", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Companies", "Companies")
                        .WithMany("AppUsers")
                        .HasForeignKey("CompaniesId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany()
                        .HasForeignKey("EmplooyeeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.AdditionalInfos", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("AdditionalInfos")
                        .HasForeignKey("EmplooyeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Cities", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Countries", "Countries")
                        .WithMany("Cities")
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Commands.CommandsToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Commands.Commands", "Command")
                        .WithMany("CommandsToEmployees")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("CommandsToEmployees")
                        .HasForeignKey("EmplooyeeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Companies", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Cities", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerSkillToLevels", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerLevels", "ComputerLevels")
                        .WithMany("ComputerSkillToLevels")
                        .HasForeignKey("ComputerLevelsId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerSkillsName", "ComputerSkillsName")
                        .WithMany("ComputerSkillToLevels")
                        .HasForeignKey("ComputerSkillsNameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.ComputerSk.ComputerSkillToLevels", "ComputerSkillToLevels")
                        .WithMany("ComputerToEmployees")
                        .HasForeignKey("ComputerSkillToLevelsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("ComputerToEmployees")
                        .HasForeignKey("EmplooyeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Continuity", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany()
                        .HasForeignKey("EmplooyeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.DepartmentToCompany", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Companies", "Company")
                        .WithMany("DepartmentToCompanies")
                        .HasForeignKey("CompanyId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Departments.Department", "Department")
                        .WithMany("DepartmentToCompanies")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Meneger")
                        .WithMany("DepartmentToCompanies")
                        .HasForeignKey("MenegerId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.Position", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Departments.SubDepartment", "SubDepartment")
                        .WithMany("Positions")
                        .HasForeignKey("SubDepartmentId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Departments.SubDepartment", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Departments.DepartmentToCompany", "DepartmentToCompany")
                        .WithMany("SubDepartments")
                        .HasForeignKey("DepartmentToCompanyId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Devices.Device", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Devices.DevicesType", "DevicesType")
                        .WithMany("Devices")
                        .HasForeignKey("DevicesTypeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Devices.DeviceToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Devices.Device", "Device")
                        .WithMany("DeviceToEmployees")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("DeviceToEmployees")
                        .HasForeignKey("EmplooyeeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.Education", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Education.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.EducationsToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Education.Education", "Education")
                        .WithMany("EducationsToEmployee")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("EducationsToEmployees")
                        .HasForeignKey("EmplooyeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.EducationTypeToUnivercity", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Education.EducationType", "EducationType")
                        .WithMany("EducationTypeToUnivercities")
                        .HasForeignKey("EducationTypeId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Education.Universities", "Universities")
                        .WithMany()
                        .HasForeignKey("UniversitiesId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.Profession", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Education.UniFaculty", "UniFaculty")
                        .WithMany()
                        .HasForeignKey("UniFacultyId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.School", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Education.EducationType", "EducationType")
                        .WithMany("Schools")
                        .HasForeignKey("EducationTypeId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("Schools")
                        .HasForeignKey("EmplooyeeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Education.UniFaculty", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Education.EducationTypeToUnivercity", "EducationTypeToUniversity")
                        .WithMany()
                        .HasForeignKey("EducationTypeToUniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Emplooyee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Companies", "Company")
                        .WithMany("Emplooyees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Gender", "Gender")
                        .WithMany("Emplooyees")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.MarialStatus", "Marialstatus")
                        .WithMany("Emplooyees")
                        .HasForeignKey("MarialstatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.MillitaryStatus", "MillitaryStatus")
                        .WithMany("Emplooyees")
                        .HasForeignKey("MillitaryStatusId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Departments.Position", "Positions")
                        .WithMany("Emplooyeess")
                        .HasForeignKey("PositionsId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.WorkBookAddition", "WorkBookAddition")
                        .WithMany("Emplooyees")
                        .HasForeignKey("WorkBookAdditionId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.WorkPlaceAddition", "WorkPlaceAddition")
                        .WithMany("Emplooyees")
                        .HasForeignKey("WorkPlaceAdditionId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.WorkTimeOfType", "WorkTimeOfType")
                        .WithMany("Emplooyees")
                        .HasForeignKey("WorkTimeOfTypeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.HistoryPositionChange", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Commands.CommandsToEmployee", "CommandsToEmployee")
                        .WithMany()
                        .HasForeignKey("CommandsToEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany()
                        .HasForeignKey("EmplooyeeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Languages.LanguageToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("LangugaeToEmployees")
                        .HasForeignKey("EmplooyeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Languages.LanguageToLanguageLevel", "LanguageToLanguageLevel")
                        .WithMany("LanguageToEmployees")
                        .HasForeignKey("LanguageToLanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Languages.LanguageToLanguageLevel", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Languages.Language", "Language")
                        .WithMany("LanguageToLanguageLevels")
                        .HasForeignKey("LanguageId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Languages.LanguageLevel", "LanguageLevel")
                        .WithMany("LanguageToLanguageLevels")
                        .HasForeignKey("LanguageLevelId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.LastWorkPlace", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("LastWorkPlaces")
                        .HasForeignKey("EmplooyeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.MillitaryStatus", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.MillitaryRank", "MillitaryRank")
                        .WithMany("MillitaryStatuses")
                        .HasForeignKey("MillitaryRankId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.Explanation", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Permissions.PermissionType", "PermissionType")
                        .WithMany()
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.ExplanationToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany()
                        .HasForeignKey("EmplooyeeId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Permissions.Explanation", "Explanation")
                        .WithMany("ExplanationToEmployees")
                        .HasForeignKey("ExplanationId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.Permission", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Permissions.PermissionType", "PermissionType")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Permissions.PermissionToEmployeee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("PermissionToEmployeees")
                        .HasForeignKey("EmplooyeeId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Permissions.Permission", "Permission")
                        .WithMany("PermissionToEmployeees")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.PhoneNumberToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("PhoneNumberToEmployees")
                        .HasForeignKey("EmplooyeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.PhoneNumbers", "PhoneNumber")
                        .WithMany("PhoneNumberToEmployees")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Relations.Relations", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Relations.RelationType", "RelationType")
                        .WithMany("Relations")
                        .HasForeignKey("RelationTypeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.Relations.RelationToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("RelationToEmployees")
                        .HasForeignKey("EmplooyeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Relations.Relations", "Relation")
                        .WithMany("RelationToEmployees")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.RewardToEmployee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany()
                        .HasForeignKey("EmplooyeeId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Reward", "Reward")
                        .WithMany("RewardToEmployees")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ScanForReward", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.RewardToEmployee", "RewardToEmployee")
                        .WithMany("ScanForRewards")
                        .HasForeignKey("RewardToEmployeeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ScanPdfCommands", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany()
                        .HasForeignKey("EmplooyeeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.ScanPdfQuitWork", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Commands.CommandsToEmployee", "CommandsToEmployee")
                        .WithMany("ScanPdfQuitWorks")
                        .HasForeignKey("CommandsToEmployeeId");
                });

            modelBuilder.Entity("InternalSystem.Areas.InternalHR.Models.TaxBreakToEmplooyee", b =>
                {
                    b.HasOne("InternalSystem.Areas.InternalHR.Models.Emplooyee", "Emplooyee")
                        .WithMany("TaxBreakToEmplooyees")
                        .HasForeignKey("EmplooyeeId");

                    b.HasOne("InternalSystem.Areas.InternalHR.Models.TaxBreak", "TaxBreak")
                        .WithMany("TaxBreakToEmplooyees")
                        .HasForeignKey("TaxBreakId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InternalSystem.Areas.Admin.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InternalSystem.Areas.Admin.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternalSystem.Areas.Admin.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InternalSystem.Areas.Admin.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
